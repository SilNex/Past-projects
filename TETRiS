#pragma once
#include <stdio.h>
#include <Windows.h>
#include <time.h>
#include <stdlib.h>
#include <conio.h>
#pragma warning (disable : 4996)
 
#define START 6419
 
#define SPACE 0
#define BLOCK 1
#define STATICBLOCK 2
#define WALL 3
 
#define UP 72
#define DOWN 80
#define LEFT 75
#define RIGHT 77
#define SPACEBAR 32
 
/* 전역 변수 선언 {{ */
char MainBoard[20][15] = { 0, };
char GameBoard[20][15] = { 0, };
char NowBlock[4][4];
char NowLocal[2] = { 0,4 }; // [0] = y [1] = x
int OldTime;
int NewTime;
char BlockEnd = 0;
char _ChoiceBlock = 0;
int spinNum = 0;
int lose = 0;
int NextBlock;
int LineBlock = 1;
 
char Omino[4][4] = { { 0,0,0,0 },
{ 0,1,1,0 },
{ 0,1,1,0 },
{ 0,0,0,0 },
};
char Imino[4][4] = { { 1,0,0,0 },
{ 1,0,0,0 },
{ 1,0,0,0 },
{ 1,0,0,0 },
};
char Smino[4][4] = { { 0,0,0,0 },
{ 0,1,1,0 },
{ 1,1,0,0 },
{ 0,0,0,0 },
};
char Zmino[4][4] = { { 0,0,0,0 },
{ 1,1,0,0 },
{ 0,1,1,0 },
{ 0,0,0,0 },
};
char Lmino[4][4] = { { 1,0,0,0 },
{ 1,0,0,0 },
{ 1,1,0,0 },
{ 0,0,0,0 },
};
char Jmino[4][4] = { { 0,1,0,0 },
{ 0,1,0,0 },
{ 1,1,0,0 },
{ 0,0,0,0 },
};
char Tmino[4][4] = { { 0,0,0,0 },
{ 0,1,0,0 },
{ 1,1,1,0 },
{ 0,0,0,0 },
};
/* }} */
void gotoxy(int x, int y) {
	COORD pos = { x,y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}
void hidencursor(void) {
	CONSOLE_CURSOR_INFO cursorInfo = { 0, };
	cursorInfo.dwSize = 1;			// 두께 1~100
	cursorInfo.bVisible = FALSE;	// 커서 표시여부
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursorInfo);
}
 
int getKey(void) {
	int key;
	key = getch();
	if (key == 224)
		key = getch();
	return key;
}
 
void Create_Borad(void) {
	int i, j;
 
	for (i = 0; i < 20; i++) {
		for (j = 0; j < 15; j++) {
			if (19 == i) {
				MainBoard[i][j] = WALL;
				GameBoard[i][j] = WALL;
			}
			else if (j == 0 || j == 14) {
				MainBoard[i][j] = WALL;
				GameBoard[i][j] = WALL;
			}
		}
	}
}
 
void ChoiceBlock(void) {
	int i, j;
	srand(time(NULL));
	switch (NextBlock)
	{
	case 0:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				NowBlock[i][j] = Omino[i][j];
			}
		}
		break;
	case 1:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				NowBlock[i][j] = Imino[i][j];
			}
		}
		break;
	case 2:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				NowBlock[i][j] = Smino[i][j];
			}
		}
		_ChoiceBlock = 2;
		break;
	case 3:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				NowBlock[i][j] = Zmino[i][j];
			}
		}
		_ChoiceBlock = 3;
		break;
	case 4:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				NowBlock[i][j] = Lmino[i][j];
			}
		}
		_ChoiceBlock = 4;
		break;
	case 5:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				NowBlock[i][j] = Jmino[i][j];
			}
		}
		_ChoiceBlock = 5;
		break;
	case 6:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				NowBlock[i][j] = Tmino[i][j];
			}
		}
		_ChoiceBlock = 6;
		break;
 
	}
}
 
void initBlock(void) {
	char x = NowLocal[1], y = NowLocal[0];
	int i, j;
	if (!BlockEnd) {
		for (i = 0; i < 20; i++) {
			for (j = 0; j < 15; j++) {
				if (BLOCK == GameBoard[i][j])
					GameBoard[i][j] = SPACE;
			}
		}
	}
 
	i = 0;
	for (y = NowLocal[0]; y < (NowLocal[0] + 4); y++) {
		j = 0;
		for (x = NowLocal[1]; x < (NowLocal[1] + 4); x++) {
			if (1 == NowBlock[i][j]) {
				GameBoard[y][x] = NowBlock[i][j];
			}
			j++;
		}
		i++;
	}
}
 
void SpinBlock(void) {
	int i, j;
	int temp[4][4];
 
	for (i = 0; i<4; i++) {
		for (j = 0; j<4; j++) {
			temp[i][j] = NowBlock[i][j];
		}
	}
 
	for (i = 0; i<4; i++) {
		for (j = 0; j<4; j++) {
			NowBlock[j][3 - i] = temp[i][j];
		}
	}
	spinNum++;
	if (spinNum == 4) {
		spinNum = 0;
	}
}
 
void MoveBlock(key) {
	int i = 0;
	switch (key)
	{
	case UP:
		Move_Check(UP);
		break;
	case DOWN:
		if (Move_Check(1) != 15) {
			NowLocal[0]++;
		}
		break;
	case LEFT:
		if (Move_Check(1) != LEFT) {
			NowLocal[1]--;
		}
		break;
	case RIGHT:
		if (Move_Check(1) != RIGHT) {
			NowLocal[1]++;
		}
		break;
	case SPACEBAR:
		while (Move_Check(1) != 15) {
			NowLocal[0]++;
			initBlock();
		}
		break;
	case 'p':
		while (1) {
			i = 0;
			for (i = 0; i < 4000; i++) {
				gotoxy(8, 5);
				printf("...Pause...");
			}
			gotoxy(8, 5);
			for (i = 0; i < 2000; i++) {
				gotoxy(8, 5);
				printf("           ");
			}
 
			if (kbhit()) {
				if (getKey() == 'p') {
					gotoxy(5, 5);
					printf("            ");
					break;
				}
				gotoxy(5, 5);
				printf("            ");
				break;
			}
		}
		break;
	case 'r':
		for (i = 0; i < 20; i++) {
			for (int j = 0; j < 15; j++) {
				MainBoard[i][j] = SPACE;
				GameBoard[i][j] = MainBoard[i][j];
			}
		}
		Create_Borad();
		main();
		break;
	case 'q':
		exit(-1);
		break;
	}
	initBlock();
}
 
int Move_Check(int up) {
	int i, j = 3, k = 0, r = 0;
	int backup[20][15] = { 0, };
 
	if (up == UP) {
		for (i = 0; i < 20; i++) {
			for (j = 0; j < 15; j++) {
				backup[i][j] = GameBoard[i][j];
			}
		}
		SpinBlock();
		i = 0;
		for (int y = NowLocal[0]; y < (NowLocal[0] + 4); y++) {
			j = 0;
			for (int x = NowLocal[1]; x < (NowLocal[1] + 4); x++) {
				if (1 == NowBlock[i][j]) {
					backup[y][x] = NowBlock[i][j];
				}
				j++;
			}
			i++;
		}
		for (i = 0; i < 20; i++) {
			for (j = 0; j < 15; j++) {
				if (GameBoard[i][j] == WALL || GameBoard[i][j] == STATICBLOCK) {
					if (GameBoard[i][j] != backup[i][j]) {
						SpinBlock();
						SpinBlock();
						SpinBlock();
						return UP;
					}
				}
			}
		}
	}
 
	for (i = 18; i > 0; i--) {
		for (j = 13; j > 0; j--) {
			if (GameBoard[i][j] == BLOCK) {
				if (_ChoiceBlock == 2) {
					if (GameBoard[i - 1][j + 1] == BLOCK && GameBoard[i][j + 1] == STATICBLOCK) {
						return 15;
					}
					if (GameBoard[i - 1][j - 1] == BLOCK && GameBoard[i][j - 1] == STATICBLOCK) {
						return 15;
					}
				}
				// Smino
				if (_ChoiceBlock == 3) {
					if (GameBoard[i - 1][j + 1] == BLOCK && GameBoard[i][j + 1] == STATICBLOCK) {
						return 15;
					}
					if (GameBoard[i - 1][j - 2] == BLOCK && GameBoard[i][j - 2] == STATICBLOCK) {
						return 15;
					}
				}
				// Zmino
				if (_ChoiceBlock == 4) {
					if (GameBoard[i - 1][j + 2] == BLOCK && GameBoard[i - 1][j + 1] == BLOCK) {
						if (GameBoard[i][j + 1] == STATICBLOCK || GameBoard[i][j + 2] == STATICBLOCK) {
							return 15;
						}
					}
 
					if (GameBoard[i - 2][j - 1] == BLOCK) {
						if (GameBoard[i - 1][j - 1] == STATICBLOCK) {
							return 15;
						}
					}
				}
				// Lmino
				if (_ChoiceBlock == 5) {
					if (GameBoard[i - 1][j - 2] == BLOCK && GameBoard[i - 1][j - 1] == BLOCK) {
						if (GameBoard[i][j - 1] == STATICBLOCK || GameBoard[i][j - 2] == STATICBLOCK) {
							return 15;
						}
					}
					if (GameBoard[i - 2][j + 1] == BLOCK) {
						if (GameBoard[i - 1][j + 1] == STATICBLOCK) {
							return 15;
						}
					}
				}
				// Jmino
				if (_ChoiceBlock == 6) {
					if (GameBoard[i - 1][j - 2] == BLOCK && GameBoard[i - 1][j - 1] == BLOCK) {
						if (GameBoard[i][j - 1] == STATICBLOCK || GameBoard[i][j + 1] == STATICBLOCK) {
							return 15;
						}
					}
					if (GameBoard[i - 1][j - 1] == BLOCK && GameBoard[i - 2][j] == BLOCK) {
						if (GameBoard[i][j - 1] == STATICBLOCK) {
							return 15;
						}
					}
					if (GameBoard[i - 1][j + 1] == BLOCK && GameBoard[i - 2][j] == BLOCK) {
						if (GameBoard[i][j + 1] == STATICBLOCK) {
							return 15;
						}
					}
					if (GameBoard[i - 1][j - 1] == BLOCK && GameBoard[i - 1][j + 1] == BLOCK) {
						if (GameBoard[i][j + 1] == STATICBLOCK || GameBoard[i][j - 1] == STATICBLOCK) {
							return 15;
						}
					}
				}
				// Tmino
 
				if (GameBoard[i + 1][j] == WALL || GameBoard[i + 1][j] == STATICBLOCK)
					return 15;
				if (GameBoard[i][j + 1] == WALL || GameBoard[i][j + 1] == STATICBLOCK)
					return RIGHT;
				if (GameBoard[i][j - 1] == WALL || GameBoard[i][j - 1] == STATICBLOCK)
					return LEFT;
			}
		}
	}
	return 0;
}
 
int Main_menu(void) {
	int frist = 0;
	int x = 15, y = 8;
	int x_ = 15, y_ = 8;
	int control = 0;
	int R;
 
	while (1) {
		system("cls");
		srand(time(NULL));
		do {
			R = rand() % 10;
		} while (R == 0);
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), R);
		printf("■■■  ■■■    ■■■  ■■■     ■   ■■■\n");
		do {
			R = rand() % 10;
		} while (R == 0);
		if (!frist)
			Sleep(500);
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), R);
		printf("  ■    ■          ■    ■   ■        ■\n");
		do {
			R = rand() % 10;
		} while (R == 0);
		if (!frist)
			Sleep(500);
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), R);
		printf("  ■    ■■■      ■    ■■■     ■   ■■■\n");
		do {
			R = rand() % 10;
		} while (R == 0);
		if (!frist)
			Sleep(500);
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), R);
		printf("  ■    ■          ■    ■   ■    ■        ■\n");
		do {
			R = rand() % 10;
		} while (R == 0);
		if (!frist)
			Sleep(500);
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), R);
		printf("  ■    ■■■      ■    ■    ■   ■   ■■■\n\n");
 
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 7);
		gotoxy(x, y);
		printf("▶");
 
		frist++;
 
		gotoxy(18, 8);
		printf("START TETRiS");
		gotoxy(22, 10);
		printf("EXIT\n");
		Sleep(1000);
		if (kbhit()) {
			control = getch();
			if (control == 224) {
				control = getch();
			}
		}
		if (control != 13 && control != UP&&control != DOWN) {
			continue;
		}
 
		if (y == 8 && control == 13) {			// 엔터의 아스키 코드인 13
			return START;
		}
 
		else if (y == 10 && control == 13) {
			system("cls");
			gotoxy(10, 5);
			printf("게임이 종료되었습니다. \n\n\n\n\n\n\n\n\n\n\n\n\n\n");
			return 0;
		}
 
		switch (control) {
		case UP:
			y = y + 2;
			if (y > 10)
				y = 8;
			control = 0;
			break;
		case DOWN:
			y = y - 2;
			if (y < 8)
				y = 10;
			control = 0;
			break;
		}
	}
}
 
void Display(void) {
	int i, j;
 
	for (i = 0; i < 20; i++) {
		for (j = 0; j < 15; j++) {
			if (SPACE == GameBoard[i][j]) {
				printf("  ");
			}
			else if (BLOCK == GameBoard[i][j]) {
				printf("  ");
			//	printf("■");
			}
			else if (STATICBLOCK == GameBoard[i][j]) {
				printf("□");
			}
			else if (WALL == GameBoard[i][j]) {
				printf("▒");
			}
			if (14 == j) {
				printf("\n");
			}
		}
	}
}
 
void CheckLine(void) {
	int i, j, k, r;
	for (i = 2; i < 19; i++) {
		k = 0;
		for (j = 1; j < 14; j++) {
			if (GameBoard[i][j] == STATICBLOCK) {
				k++;
				if (k == 13) {
					for (r = 1; r < 14; r++) {
						GameBoard[i][r] = SPACE;
						for (k = i; k >= 1; k--) {
							GameBoard[k][r] = GameBoard[k - 1][r];
						}
						k = 0;
					}
				}
			}
		}
	}
	for (int i = 0; i < 20; i++) {
		for (int j = 0; j < 15; j++) {
			MainBoard[i][j] = GameBoard[i][j];
		}
	}
}
 
void GO_TO(void) {
	int i, j;
 
	for (i = 0; i < 20; i++) {
		for (j = 0; j < 15; j++) {
			if (GameBoard[i][j] != MainBoard[i][j]) {
				if (GameBoard[i][j] == BLOCK) {
					gotoxy(j * 2, i);
					printf("■");
				}
			}
		}
	}
 
	srand(time(NULL));
	if (LineBlock == 1) {
		NextBlock = rand() % 7;
		LineBlock = 0;
	}
 
 
	gotoxy(32, 1);
	printf("▒NEXT_BLOCK▒");
	for (i = 0; i < 7; i++) {
		for (j = 1; j < 6; j++) {
			if (i == 0 || i == 6) {
				gotoxy((i * 2) + 32, j + 1);
				printf("▒");
			}
			if (j == 4) {
				gotoxy((i * 2) + 32, j + 1);
				printf("\n");
			}
			
		}
	}
	gotoxy(32, 6);
	printf("▒▒▒▒▒▒▒");
 
	gotoxy(32, 8);
	printf("플레이 시간:%d", clock() / CLOCKS_PER_SEC);
 
 
	switch (NextBlock)
	{
	case 0:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				gotoxy((i * 2) + 35, j + 2);
				if (Omino[i][j] == BLOCK) {
					printf("■");
				}
				else {
					printf("  ");
				}
				if (j == 3) {
					printf("\n");
				}
			}
		}
		break;
	case 1:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				gotoxy((i * 2) + 35, j + 2);
				if (Imino[i][j] == BLOCK) {
					printf("■");
				}
				else {
					printf("  ");
				}
				if (j == 3) {
					printf("\n");
				}
			}
		}
		break;
	case 2:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				gotoxy((i * 2) + 35, j + 2);
				if (Smino[i][j] == BLOCK) {
					printf("■");
				}
				else {
					printf("  ");
				}
				if (j == 3) {
					printf("\n");
				}
			}
		}
		break;
	case 3:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				gotoxy((i * 2) + 35, j + 2);
				if (Zmino[i][j] == BLOCK) {
					printf("■");
				}
				else {
					printf("  ");
				}
				if (j == 3) {
					printf("\n");
				}
			}
		}
		break;
	case 4:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				gotoxy((i * 2) + 35, j + 2);
				if (Lmino[i][j] == BLOCK) {
					printf("■");
				}
				else {
					printf("  ");
				}
				if (j == 3) {
					printf("\n");
				}
			}
		}
		break;
	case 5:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				gotoxy((i * 2) + 35, j + 2);
				if (Jmino[i][j] == BLOCK) {
					printf("■");
				}
				else {
					printf("  ");
				}
				if (j == 3) {
					printf("\n");
				}
			}
		}
		break;
	case 6:
		for (i = 0; i < 4; i++) {
			for (j = 0; j < 4; j++) {
				gotoxy((i * 2) + 35, j + 2);
				if (Tmino[i][j] == BLOCK) {
					printf("■");
				}
				else {
					printf("  ");
				}
				if (j == 3) {
					printf("\n");
				}
			}
		}
		break;
 
	}
}
 
void Lose_Check() {
	for (int i = 1; i < 13; i++) {
		if (GameBoard[2][i] == STATICBLOCK) {
			gotoxy(5, 5);
			printf("Your Lose!! \n\n\n\n\n\n\n\n\n\n\n\n\n\n");
			exit(-1);
		}
	}
}
 
int main(void) {
	hidencursor();
	system("mode con: cols=51 lines=15");
	if (START == Main_menu()) {
		system("mode con: cols=50 lines=21");
		Create_Borad();
		ChoiceBlock();
		initBlock();
		Display();
		OldTime = clock() / CLOCKS_PER_SEC;
		while (1) {
			NewTime = clock() / CLOCKS_PER_SEC;
			if (NewTime - OldTime > 1) {
				if (Move_Check(1) != 15) {
					NowLocal[0]++;
					initBlock();
					OldTime = NewTime;
					system("cls");
					Display();
				}
			}
			// 시간 체크
 
			if (Move_Check(1) == 15) {
				for (int i = 0; i < 20; i++) {
					for (int j = 0; j < 15; j++) {
						if (GameBoard[i][j] == BLOCK) {
							MainBoard[i][j] = STATICBLOCK;
							GameBoard[i][j] = MainBoard[i][j];
						}
					}
				}
				LineBlock = 1;	// 다음 블럭을 미리 부르기 위해
				Lose_Check();
				CheckLine();
				NowLocal[0] = 0;
				NowLocal[1] = 5;
				ChoiceBlock();
				system("cls");
				Display();
				initBlock();
			}
			// 블럭 채크 및 재 생성
			
			if (kbhit()) {
				for (int i = 0; i < 20; i++) {
					for (int j = 0; j < 15; j++) {
						if (GameBoard[i][j] != MainBoard[i][j]) {
							gotoxy(j * 2, i);
							printf("  ");
						}
					}
				}
				MoveBlock(getKey());
			}
			GO_TO();
		}
	}
}

// 윈도우 라이브러리 필요.
// 자세한 내용은 아래 링크 참고
// https://silnex.kro.kr/wordpress/2015/11/28/완성tetris/
